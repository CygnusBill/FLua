using System;
using System.Linq;
using FLua.Ast;
using FLua.Runtime;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FLua.Runtime.Tests
{
    [TestClass]
    public class EnhancedCoroutineTests
    {
        [TestMethod]
        public void TestBasicCoroutineCreation()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            // Test creating a coroutine
            var createFunc = (LuaFunction)env.GetVariable("coroutine").AsTable!.Get(new LuaString("create"));
            
            var testFunc = new LuaUserFunction(args =>
            {
                return new[] { new LuaString("Hello from coroutine!") };
            });
            
            var result = createFunc.Call(new[] { testFunc });
            
            Assert.AreEqual(1, result.Length);
            Assert.IsInstanceOfType(result[0], typeof(EnhancedLuaCoroutine));
        }

        [TestMethod]
        public void TestCoroutineResume()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            var coroutineTable = env.GetVariable("coroutine").AsTable!;
            var createFunc = (LuaFunction)coroutineTable.Get(new LuaString("create"));
            var resumeFunc = (LuaFunction)coroutineTable.Get(new LuaString("resume"));
            
            // Create a simple coroutine
            var testFunc = new LuaUserFunction(args =>
            {
                return new[] { new LuaString("Result: "), args.Length > 0 ? args[0] : new LuaString("no args") };
            });
            
            var createResult = createFunc.Call(new[] { testFunc });
            var coroutine = createResult[0];
            
            // Resume the coroutine
            var resumeResult = resumeFunc.Call(new[] { coroutine, new LuaString("test arg") });
            
            Assert.IsTrue(resumeResult.Length >= 2);
            Assert.IsTrue(((LuaBoolean)resumeResult[0]).Value); // Success
        }

        [TestMethod] 
        public void TestCoroutineYield()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            var coroutineTable = env.GetVariable("coroutine").AsTable!;
            var createFunc = (LuaFunction)coroutineTable.Get(new LuaString("create"));
            var resumeFunc = (LuaFunction)coroutineTable.Get(new LuaString("resume"));
            var yieldFunc = (LuaFunction)coroutineTable.Get(new LuaString("yield"));
            
            // Create a coroutine that yields
            var yieldingFunc = new LuaUserFunction(args =>
            {
                // This would yield in a real implementation
                return yieldFunc.Call(new[] { new LuaString("yielded value") });
            });
            
            var createResult = createFunc.Call(new[] { yieldingFunc });
            var coroutine = createResult[0];
            
            try
            {
                var resumeResult = resumeFunc.Call(new[] { coroutine });
                // Should get yielded value back
                Assert.IsTrue(resumeResult.Length >= 1);
            }
            catch (LuaRuntimeException ex)
            {
                // Expected if not in coroutine context
                Assert.IsTrue(ex.Message.Contains("outside a coroutine"));
            }
        }

        [TestMethod]
        public void TestCoroutineStatus()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            var coroutineTable = env.GetVariable("coroutine").AsTable!;
            var createFunc = (LuaFunction)coroutineTable.Get(new LuaString("create"));
            var statusFunc = (LuaFunction)coroutineTable.Get(new LuaString("status"));
            
            var testFunc = new LuaUserFunction(args => new[] { new LuaString("done") });
            
            var createResult = createFunc.Call(new[] { testFunc });
            var coroutine = createResult[0];
            
            // Check initial status
            var statusResult = statusFunc.Call(new[] { coroutine });
            Assert.AreEqual("suspended", ((LuaString)statusResult[0]).Value);
        }

        [TestMethod]
        public void TestCoroutineWrap()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            var coroutineTable = env.GetVariable("coroutine").AsTable!;
            var wrapFunc = (LuaFunction)coroutineTable.Get(new LuaString("wrap"));
            
            var testFunc = new LuaUserFunction(args =>
            {
                return new[] { new LuaString("wrapped result") };
            });
            
            var wrapResult = wrapFunc.Call(new[] { testFunc });
            Assert.AreEqual(1, wrapResult.Length);
            Assert.IsInstanceOfType(wrapResult[0], typeof(LuaFunction));
            
            // Call the wrapped function
            var wrappedFunc = (LuaFunction)wrapResult[0];
            var callResult = wrappedFunc.Call(Array.Empty<LuaValue>());
            
            Assert.IsTrue(callResult.Length > 0);
            Assert.AreEqual("wrapped result", ((LuaString)callResult[0]).Value);
        }

        [TestMethod]
        public void TestCoroutineRunning()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            var coroutineTable = env.GetVariable("coroutine").AsTable!;
            var runningFunc = (LuaFunction)coroutineTable.Get(new LuaString("running"));
            
            // Outside of coroutine context
            var runningResult = runningFunc.Call(Array.Empty<LuaValue>());
            Assert.AreEqual(2, runningResult.Length);
            Assert.IsInstanceOfType(runningResult[0], typeof(LuaNil));
            Assert.IsTrue(((LuaBoolean)runningResult[1]).Value); // Main thread
        }

        [TestMethod]
        public void TestCoroutineIsYieldable()
        {
            var env = EnhancedLuaEnvironment.CreateStandardEnvironment();
            EnhancedCoroutineLib.AddEnhancedCoroutineLibrary(env);
            
            var coroutineTable = env.GetVariable("coroutine").AsTable!;
            var isYieldableFunc = (LuaFunction)coroutineTable.Get(new LuaString("isyieldable"));
            
            // Outside of coroutine context - should not be yieldable
            var result = isYieldableFunc.Call(Array.Empty<LuaValue>());
            Assert.AreEqual(1, result.Length);
            Assert.IsFalse(((LuaBoolean)result[0]).Value);
        }
    }
}
